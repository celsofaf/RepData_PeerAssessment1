ls()
dir()
setwd("~/Dropbox/Coursera - Data Science/03 - Getting and Cleaning Data")
dir.create("Quiz1")
setwd("Quiz1")
setwd()
cwd()
?setwd
getwd()
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fuleUrl, destfile="amsurvey.csv", method=curl)
download.file(fuleUrl, destfile="amsurvey.csv", method="curl")
download.file(fileUrl, destfile="amsurvey.csv", method="curl")
list.files("./")
dateDownloaded <- date()
dateDownloaded
survey <- read.csv("amsurvey.csv")
head(survey)
str(survey)
fuleUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf"
download.file(fileUrl, destfile="survey_codebook.pdf", method="curl")
list.files("./")
head(survey$VAL)
nrow(survey)
nrow(survey[VAL == 24, ])
nrow(survey[survey$VAL == 24, ])
values <- survey$VAL
values
values[values == 24]
values <- survey$VAL[complete.cases(survey$VAL)]
values[values == 24]
values
table(values)
nrow(values[values==24])
length(values[values==24])
head(survey$FES)
table(survey$FES)
summary(survey$FES)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile="NGAP.xlsx", method="curl")
list.files("./")
library(xlsx)
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
library(xlsx)
list.files("./")
ngap <- read.xlsx("NGAP.xlsx", sheetIndex=1, header=TRUE)
str(ngap)
names(ngap)
ngap <- read.xlsx("NGAP.xlsx", sheetIndex=1)
head(ngap)
ngap <- read.xlsx("NGAP.xlsx", sheetIndex=1) #, header=TRUE)
str(ngap)
ngap <- ngap[18:23, 7:15]
ngap
dat <- ngap[18:23, 7:15]
dat
ngap <- read.xlsx("NGAP.xlsx", sheetIndex=1) #, header=TRUE)
dat <- ngap[18:23, 7:15]
dat
sum(dat$Zip*dat$Ext,na.rm=T)
ngap <- read.xlsx("NGAP.xlsx", sheetIndex=1, header=FALSE) #, header=TRUE)
str(ngap)
dat <- ngap[18:23, 7:15]
dat
sum(dat$Zip*dat$Ext,na.rm=T)
?read.xlsx
dat <- read.xlsx("NGAP.xlsx", sheetIndex=1, header=TRUE, rowIndex=18:23, colIndex=7:15)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
library(XML)
library(xml)
install.packages("XML")
install.packages("XML")
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
download.file(fileUrl, destfile="restaurants.xml", method="curl")
doc <- xmlTreeParse("restaurants.xml", useInternal=TRUE)
dateDownloaded <- date()
dateDownloaded
list.files("./")
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode, xmlValue)
rootNode[[1]][[1]]
names(rootNode)
xmlSApply(rootNode, //row, xmlValue)
xmlSApply(rootNode, "//row", xmlValue)
xmlSApply(rootNode, "//zipcode", xmlValue)
xmlSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//zipcode", xmlValue)
zipcodes <- xpathSApply(rootNode, "//zipcode", xmlValue)
table(zipcodes)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile="idahosurvey.csv", method="curl")
list.files("./")
dateDownloaded <- date()
dateDownloaded
?fread
library(data.table)
install.packages("data.table")
library(data.table)
?fread
DT <- fread("idahosurvey.csv")
str(DT)
DT$pwgtp15
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
sapply(split(DT$pwgtp15,DT$SEX),mean)
DT[,mean(pwgtp15),by=SEX]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)) + system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(rowMeans(DT)[DT$SEX==1]) + system.time(rowMeans(DT)[DT$SEX==2])
system.time(DT[,mean(pwgtp15),by=SEX]) * 1000
system.time(DT[,mean(pwgtp15),by=SEX]) * 100000
survey$FES
table(survey$FES)
library(httr)
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "9cd6774c4ea699c0d965")
GITHUB_CONSUMER_SECRET <- "18f705fa3dbf8a52700ebb744302da5f1b848e3b"
myapp <- oauth_app("github", "9cd6774c4ea699c0d965")
rm(GITHUB_CONSUMER_SECRET)
myapp <- oauth_app("github", "ee6110de0ed7d8df5f2b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", key="ee6110de0ed7d8df5f2b",
secret="511b680805f371cf50fafacf61f46edf43f52d87")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
install.packages("jsonlite")
content(req)
req
library(jsonlite)
data <- fromJSON(req)
str(req)
req$headers
req$headers$date
str(req)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
str(req)
names(req)
req$content
names(req)
req$times
req$handle
req$url
req$headers
data <- fromJSON(req)
data <- fromJSON(https://api.github.com/users/jtleek/repos)
data <- fromJSON("https://api.github.com/users/jtleek/repos")
data
str(data)
names(data)
sort(names(data))
data$url
data$created_at
data$url
data$created_at
data$created_at[4]
library(sqldf)
install.packages("sqldf")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile="acs_data.csv", method="curl")
list.files("./")
dateDownloaded <- date()
dateDownloaded
acs <- read.csv("acs_data.csv")
str(acs)
names(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
data <- sqldf("select pwgtp1 from acs where AGEP < 50")
str(data)
summary(data)
identical(acs$AGEP, sqldf("select distinct AGEP from acs"))
identical(unique(acs$AGEP), sqldf("select distinct AGEP from acs"))
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
values(sqldf("select distinct AGEP from acs"))
as.vector(sqldf("select distinct AGEP from acs"))
as.numeric(sqldf("select distinct AGEP from acs"))
str(sqldf("select distinct AGEP from acs"))
str(sqldf("select distinct AGEP from acs")$AGEP)
identical(unique(acs$AGEP), sqldf("select distinct AGEP from acs")$AGEP)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html ")
htmlCode <- readLines(con)
close(con)
htmlCode
nchar(htmlCode[c(10, 20, 30, 100)])
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data <- read.table(con)
data <- readLines(con)
close(con)
download.file(fileUrl, destfile="quiz2question5.for", method="curl")
list.files("./")
dateDownloaded <- date()
dateDownloaded
data <- read.table("quiz2question5.for")
str(data)
data <- read.table("quiz2question5.for", header=FALSE)
str(data)
data <- read.table("quiz2question5.for", header=FALSE, sep=",")
str(data)
sum(data[, 4])
data[, 4]
unique(data[, 4])
data <- read.table("quiz2question5.for", sep=",")
str(data)
data[, 4]
unique(data[, 4])
data <- readLines("quiz2queation5.for")
data <- readLines("quiz2question5.for")
head(data)
data <- read.table("quiz2question5.for", sep=",")
str(data)
?read.table
data <- read.table("quiz2question5.for", header=TRUE, sep=",")
str(data)
data[, 4]
unique(data[, 4])
sum(data[, 4])
head(str(data))
names(data)
download.file(fileUrl, destfile="quiz2question5.for")
data <- readLines("quiz2question5.for")
head(data)
?read.fwf
width <- nchar(data[5])
data <- read.fwf("quiz2question5.for", widths=width, skip=4)
head(data)
data <- read.fwf("quiz2question5.for", widths=width, skip=4, sep=" ")
data <- read.fwf("quiz2question5.for", widths=width, skip=4, sep="     ")
widths <- c(9, 4, 4, 4, 4, 4, 4, 4, 4)
data <- read.fwf("quiz2question5.for", widths=widths, skip=4)
head(data)
widths <- c(9, -5, 4, 4, -5, 4, 4, -5, 4, 4, -5, 4, 4)
data <- read.fwf("quiz2question5.for", widths=widths, skip=4)
head(data)
data.origin <- readLines("quiz2question5.for")
head(data.origin)
widths <- c(-1, 9, -5, 4, 4, -5, 4, 4, -5, 4, 4, -5, 4, 4)
data <- read.fwf("quiz2question5.for", widths=widths, skip=4)
head(data)
data[, 4]
sum(data[, 4])
setwd("~/Dropbox/Coursera - Data Science/05 - Reproducible Research/peer1")
data <- read.csv("activity.csv")
str(data)
head(data)
tail(data)
summary(steps)
summary(data$steps)
install.packages("knitr")
setwd("~/Dropbox/Coursera - Data Science/05 - Reproducible Research/RepData_PeerAssessment1")
?unz
list.files()
list.files()
data <- read.csv(unz("activity.zip", "activity.csv"))
str(data)
head(data)
tail(data)
summary(data$steps)
hist(data$steps)
?hist
hist(data$steps, na.rm=T)
hist(data$steps[!is.na(data$steps)])
mean(data$steps)
mean(data$steps, na.rm=TRUE)
median(data$steps, na.rm=TRUE)
?plot
plot(data$steps, type="l")
?tapply
?split
intervalsteps <- split(data, data$steps)
str(intervalsteps)
names(intervalsteps)
names(data)
intervalsteps <- split(data, data$interval)
names(intervalsteps)
intervalsteps$1200
intervalsteps$"1200"
intervalsteps <- split(data$steps, data$interval)
intervalsteps$"1200"
intervaldaymeans <- lapply(intervalsteps, mean, na.rm=TRUE)
intervaldaymeans
intervalmeans <- lapply(split(data$steps, data$interval), mean, na.rm=TRUE)
intervalmeans <- unlist(intervalmeans)
intervalmeans
str(intervalmeans)
plot(intervalmeans, type="l")
?plot
plot(intervalmeans, type="l", xlab=names(intervalmeans))
names(intervalmeans)
names(intervalmeans) <- as.numeric(names(intervalmeans))
names(intervalmeans)
?names
as.numeric(intervalmeans)
as.numeric(names(intervalmeans))
plot(intervalmeans, as.numeric(names(intervalmeans)), type="l", xlab=names(intervalmeans))
plot(as.numeric(names(intervalmeans)), intervalmeans, type="l", xlab=names(intervalmeans))
plot(as.numeric(names(intervalmeans)), intervalmeans, type="l")
plot(as.numeric(names(intervalmeans)), intervalmeans, type="l", xlab="5-min interval")
plot(as.numeric(names(intervalmeans)), intervalmeans, type="l", xlab="5-min interval", ylab="Mean daily steps")
which(max(intervalmeans))
which(intervalmeans[max(intervalmeans)])
?which
which(intervalmeans == max(intervalmeans))
max.interval <- which(intervalmeans == max(intervalmeans))
names(max.interval)
length(data$steps[is.na(data$steps)])
intervalmeans
newdata <- data
str(newdata)
newdata <- data
for i in 1:nrow(newdata) {
if ( is.na(newdata$steps[i]) )
newdata$steps[i] <- intervalmeans$(as.character(newdata$interval[i])
}
for i in 1:nrow(newdata) {
if ( is.na(newdata$steps[i]) )
newdata$steps[i] <- intervalmeans$(as.character(newdata$interval[i]))
}
for i in 1:nrow(newdata) {
if ( is.na(newdata$steps[i]) ) {
int <- as.character(newdata$interval[i])
newdata$steps[i] <- intervalmeans[int]
}
}
nrow(newdat)
nrow(newdata)
nrow(newdata)
for i in 1:nrow(newdata) {
if ( is.na(newdata$steps[i]) ) {
int <- as.character(newdata$interval[i])
newdata$steps[i] <- intervalmeans[int]
}
}
?for
?
??for
?
for i in 1:nrow(newdata) {
if ( is.na(newdata$steps[i]) ) {
int <- as.character(newdata$interval[i])
newdata$steps[i] <- intervalmeans[int]
}
}
for i in 1:10 print i
for ( i in 1:nrow(newdata) ) {
if ( is.na(newdata$steps[i]) ) {
int <- as.character(newdata$interval[i])
newdata$steps[i] <- intervalmeans[int]
}
}
str(newdata)
daytotal <- unlist(lapply(split(newdata$steps, newdata$date), sum))
str(daytotal)
hist(daytotal)
hist(daytotal, xlab="Total steps per day")
mean(daytotal)
median(daytotal)
?median
mean(daytotal)
?weekdays()
weekdays(head(data$date))
head(data$date)
head(as.character(data$date))
weekdays(head(as.character(data$date)))
as.Date(head(data%date))
as.Date(head(data$date))
weekdays(as.Date(head(data$date)))
weekdays(Sys.time())
weekdays(Sys.time()) + 1000
weekdays(Sys.time() + 1000)
weekdays(Sys.time() + 100000)
wkday <- c()
candidates <- c("segunda", "terça", "quarta", "quinta", "sexta")  # my system is in Portuguese
for ( i in 1:nrow(newdate) )
wkday <- c(wkday, weekdays(as.Date(newdata$date)) %in% candidates)
for ( i in 1:nrow(newdata) )
wkday <- c(wkday, weekdays(as.Date(newdata$date)) %in% candidates)
wkday <- c()
for ( i in 1:nrow(newdata) )
wkday <- c(wkday, weekdays(as.Date(newdata$date[i])) %in% candidates)
wkday
summary(wkday)
12960 / 4608
5 / 2
newdata$wkday <- wkday
par(mfrow=c(2, 1))
wkdaymean <- unlist(lapply(split(newdata$steps[newdata$wkday == TRUE], newdata$date), mean))
newdata.wkday <- newdata[newdata$wkday == TRUE]
newdata$wkday
newdata.wkday <- newdata[newdata$wkday == TRUE, ]
newdata.wkend <- newdata[newdata$wkday == FALSE, ]
wkdaymean <- unlist(lapply(split(newdata.wkday$steps, newdata$date), mean))
wkdaymean <- unlist(lapply(split(newdata.wkday$steps, newdata.wkday$date), mean))
wkendmean <- unlist(lapply(split(newdata.wkend$steps, newdata.wkend$date), mean))
wkdaymean
newdata
wkdaymean
nrow(wkdaymean)
length(wkdaymean)
length(wkendmean)
newdata.wkday
newdata.wkend
wkendmean
wkdaymean <- wkdaymean(is.nan(wkdaymean))
wkdaymean <- wkdaymean[is.nan(wkdaymean)]
wkdaymean
wkdaymean <- unlist(lapply(split(newdata.wkday$steps, newdata.wkday$date), mean))
wkdaymean <- wkdaymean[!is.nan(wkdaymean)]
wkdaymean
wkendmean <- wkendmean[!is.nan(wkendmean)]
plot(wkdaymean, type="l")
plot(wkendmean, type="l")
wkdaymean <- unlist(lapply(split(newdata.wkday$steps, newdata.wkday$interval), mean))
wkendmean <- unlist(lapply(split(newdata.wkend$steps, newdata.wkend$interval), mean))
wkdaymean
plot(wkdaymean, type="l")
plot(wkendmean, type="l")
plot(as.numeric(names(wkdaymean)), wkdaymean, type="l", xlab="5-min interval", ylab="Mean daily steps")
plot(as.numeric(names(wkendmean)), wkendmean, type="l", xlab="5-min interval", ylab="Mean daily steps")
plot(as.numeric(names(wkdaymean)), wkdaymean, type="l", xlab="5-min interval, weekdays", ylab="Mean daily steps")
plot(as.numeric(names(wkendmean)), wkendmean, type="l", xlab="5-min interval, weekend", ylab="Mean daily steps")
